System.register("chunks:///_virtual/GameContent.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(e){var t,o,n,i,l,s,a;return{setters:[function(e){t=e.applyDecoratedDescriptor,o=e.initializerDefineProperty},function(e){n=e.cclegacy,i=e.Label,l=e._decorator,s=e.Component,a=e.native}],execute:function(){var r,c,u,p,f;n._RF.push({},"bee3fBNNvJPPq9BU/XUHvI3","GameContent",void 0);const{ccclass:h,property:b}=l;e("GameContent",(r=h("GameContent"),c=b(i),r((f=t((p=class extends s{constructor(...e){super(...e),o(this,"label",f,this)}onLoad(){{const e=a.fileUtils.getSearchPaths();console.log("Current search paths:",e);const t=a.fileUtils.getWritablePath()+"hot-update-storage/";if(a.fileUtils.isDirectoryExist(t)){const e=a.fileUtils.listFiles(t);console.log("Hot update files:",e)}}console.log("onLoad is called version 1.0.3"),this.label&&(this.label.string="Inital one updated by thanis")}}).prototype,"label",[c],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),u=p))||u));n._RF.pop()}}}));

System.register("chunks:///_virtual/main",["./GameContent.ts","./RemoteEntryLoader.ts"],(function(){return{setters:[null,null],execute:function(){}}}));

System.register("chunks:///_virtual/RemoteEntryLoader.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(e){var t,s,a,i,n,o,r,l,h,c,d,g,p,u;return{setters:[function(e){t=e.applyDecoratedDescriptor,s=e.initializerDefineProperty},function(e){a=e.cclegacy,i=e.Asset,n=e.Label,o=e.ProgressBar,r=e.Button,l=e._decorator,h=e.Component,c=e.native,d=e.sys,g=e.assetManager,p=e.director,u=e.game}],execute:function(){var f,U,y,M,b,m,F,E,v,L,P,R,A;a._RF.push({},"bd9f3f3xF9NvYxZN8P+pIm1","RemoteEntryLoader",void 0);const{ccclass:k,property:B}=l;e("RemoteEntryLoader",(f=k("RemoteEntryLoader"),U=B(i),y=B(n),M=B(o),b=B(r),m=B(r),f((v=t((E=class extends h{constructor(...e){super(...e),s(this,"manifestUrl",v,this),s(this,"statusLabel",L,this),s(this,"progressBar",P,this),s(this,"checkUpdateBtn",R,this),s(this,"retryBtn",A,this),this.assetsManager=null,this.storagePath="",this.updating=!1,this.canRetry=!1,this.updateListener=null}onLoad(){this.storagePath=(c.fileUtils&&c.fileUtils.getWritablePath?c.fileUtils.getWritablePath():"/")+"hot-update-storage/",this.initHotUpdate(),this.setupUI(),this.checkForPendingUpdate()}checkForPendingUpdate(){const e=d.localStorage.getItem("hotUpdateReady"),t=d.localStorage.getItem("hotUpdatePath");"true"===e&&t&&(console.log("Applying pending hot update..."),this.applyHotUpdate(t),d.localStorage.removeItem("hotUpdateReady"),d.localStorage.removeItem("hotUpdatePath"))}applyHotUpdate(e){try{const t=c.fileUtils.getSearchPaths();console.log("Current search paths:",t);const s=t.indexOf(e);s>-1&&t.splice(s,1),t.unshift(e),c.fileUtils.setSearchPaths(t),console.log("Updated search paths:",t),this.statusLabel.string="Hot update applied successfully!",this.reloadMainAssets()}catch(e){console.error("Failed to apply hot update:",e),this.statusLabel.string="Failed to apply hot update"}}reloadMainAssets(){g&&g.assets&&g.assets.clear(),this.scheduleOnce((()=>{p.getScene()&&p.loadScene(p.getScene().name,(e=>{e?console.error("Failed to reload scene:",e):console.log("Scene reloaded successfully")}))}),.1)}initHotUpdate(){try{var e;c.fileUtils.isDirectoryExist(this.storagePath)||c.fileUtils.createDirectory(this.storagePath),console.log("Storage path:",this.storagePath),console.log("Manifest URL:",null==(e=this.manifestUrl)?void 0:e.nativeUrl),this.assetsManager=new c.AssetsManager(this.manifestUrl.nativeUrl,this.storagePath),this.assetsManager.setMaxConcurrentTask(3),this.assetsManager.setVersionCompareHandle(((e,t)=>this.compareVersion(e,t))),this.assetsManager.setVerifyCallback(((e,t)=>this.verifyAsset(e,t))),this.updateListener=e=>this.updateCallback(e),this.assetsManager.setEventCallback(this.updateListener),this.loadLocalManifest(),this.statusLabel.string="Hot update initialized"}catch(e){console.error("Failed to initialize hot update:",e),this.statusLabel.string="Failed to initialize hot update"}}loadLocalManifest(){var e;if(this.assetsManager&&null!=(e=this.manifestUrl)&&e.nativeUrl)try{this.assetsManager.loadLocalManifest(this.manifestUrl.nativeUrl),this.scheduleOnce((()=>{this.setupSearchPaths()}),.1)}catch(e){console.error("Failed to load local manifest:",e)}}setupSearchPaths(){if(this.assetsManager)try{const e=this.assetsManager.getLocalManifest();if(!e||!e.isLoaded())return void console.log("Local manifest not loaded yet");console.log("Setting up search paths...");const t=c.fileUtils.getSearchPaths();console.log("Original search paths:",t);const s=this.storagePath,a=t.indexOf(s);a>-1&&t.splice(a,1),t.unshift(s),c.fileUtils.setSearchPaths(t),console.log("Updated search paths:",t)}catch(e){console.error("Failed to setup search paths:",e)}}setupUI(){this.checkUpdateBtn&&this.checkUpdateBtn.node.on("click",this.checkForUpdate,this),this.retryBtn&&(this.retryBtn.node.on("click",this.retry,this),this.retryBtn.node.active=!1)}checkForUpdate(){this.assetsManager&&!this.updating&&(console.log("Checking for updates..."),this.updating=!0,this.canRetry=!1,this.checkUpdateBtn.node.active=!1,this.retryBtn.node.active=!1,this.statusLabel.string="Checking for updates...",this.progressBar.progress=0,this.assetsManager.checkUpdate())}retry(){this.canRetry&&(this.canRetry=!1,this.retryBtn.node.active=!1,this.statusLabel.string="Retrying failed downloads...",this.assetsManager.downloadFailedAssets())}updateCallback(e){const t=e.getEventCode();switch(console.log("Update event code:",t),t){case c.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:this.statusLabel.string="No local manifest file found",console.log("No local manifest file found"),this.onUpdateFinished(!1);break;case c.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:this.statusLabel.string="Failed to download manifest",console.log("Failed to download manifest"),this.onUpdateFinished(!1);break;case c.EventAssetsManager.ERROR_PARSE_MANIFEST:this.statusLabel.string="Failed to parse manifest",console.log("Failed to parse manifest"),this.onUpdateFinished(!1);break;case c.EventAssetsManager.NEW_VERSION_FOUND:this.statusLabel.string="New version found, starting download...",console.log("New version found, starting download..."),this.assetsManager.update();break;case c.EventAssetsManager.ALREADY_UP_TO_DATE:this.statusLabel.string="Already up to date",console.log("Already up to date"),this.onUpdateFinished(!0);break;case c.EventAssetsManager.UPDATE_PROGRESSION:console.log("Update progression"),this.handleUpdateProgress(e);break;case c.EventAssetsManager.ASSET_UPDATED:console.log("Asset updated:",e.getAssetId());break;case c.EventAssetsManager.ERROR_UPDATING:const t=e.getAssetId(),s=e.getMessage();this.statusLabel.string=`Failed to update asset: ${t}\n${s}`,console.log(`Failed asset: ${t}, Message: ${s}`),this.onUpdateFinished(!1);break;case c.EventAssetsManager.UPDATE_FINISHED:this.statusLabel.string="Update completed! Preparing restart...",console.log("Update completed! Preparing restart..."),this.handleUpdateFinished();break;case c.EventAssetsManager.UPDATE_FAILED:this.statusLabel.string="Update failed: "+e.getMessage(),console.log("Update failed:",e.getMessage()),this.canRetry=!0,this.retryBtn.node.active=!0,this.onUpdateFinished(!1);break;case c.EventAssetsManager.ERROR_DECOMPRESS:this.statusLabel.string="Decompression failed",console.log("Decompression failed"),this.onUpdateFinished(!1)}}handleUpdateFinished(){console.log("Update finished, setting up for restart...");const e=c.fileUtils.getSearchPaths(),t=this.storagePath,s=e.indexOf(t);s>-1&&e.splice(s,1),e.unshift(t),c.fileUtils.setSearchPaths(e),console.log("Updated search paths:",e),d.localStorage.setItem("hotUpdateReady","true"),d.localStorage.setItem("hotUpdatePath",t),g&&g.assets&&g.assets.clear(),this.onUpdateFinished(!0,!0)}handleUpdateProgress(e){const t=e.getPercent(),s=e.getDownloadedBytes(),a=e.getTotalBytes(),i=e.getDownloadedFiles(),n=e.getTotalFiles();this.progressBar.progress=t/100,this.statusLabel.string=`Downloading... ${Math.floor(t)}%\nFiles: ${i}/${n}\nSize: ${this.formatBytes(s)}/${this.formatBytes(a)}`,console.log(`Progress: ${Math.floor(t)}% - Files: ${i}/${n}`)}onUpdateFinished(e,t=!1){this.updating=!1,this.checkUpdateBtn.node.active=!0,t&&this.showRestartOption()}showRestartOption(){this.statusLabel.string="Update completed! Tap to restart.",this.checkUpdateBtn.getComponentInChildren(n).string="Restart Game",this.checkUpdateBtn.node.off("click",this.checkForUpdate,this),this.checkUpdateBtn.node.on("click",this.restartGame,this)}restartGame(){console.log("Restarting game..."),this.assetsManager&&this.assetsManager.setEventCallback(null),g&&g.assets&&g.assets.clear(),u.restart()}compareVersion(e,t){const s=e=>e.split(".").map((e=>parseInt(e)||0)),a=s(e),i=s(t);for(let e=0;e<Math.max(a.length,i.length);e++){const t=a[e]||0,s=i[e]||0;if(t!==s)return t-s}return 0}verifyAsset(e,t){return!0}formatBytes(e){if(0===e)return"0 B";const t=Math.floor(Math.log(e)/Math.log(1024));return parseFloat((e/Math.pow(1024,t)).toFixed(2))+" "+["B","KB","MB","GB"][t]}onDestroy(){this.assetsManager&&this.updateListener&&this.assetsManager.setEventCallback(null)}}).prototype,"manifestUrl",[U],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),L=t(E.prototype,"statusLabel",[y],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),P=t(E.prototype,"progressBar",[M],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),R=t(E.prototype,"checkUpdateBtn",[b],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),A=t(E.prototype,"retryBtn",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),F=E))||F));a._RF.pop()}}}));

(function(r) {
  r('virtual:///prerequisite-imports/main', 'chunks:///_virtual/main'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});