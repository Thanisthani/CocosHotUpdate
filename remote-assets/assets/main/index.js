System.register("chunks:///_virtual/GameContent.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(e){var t,n,o,r,l,i;return{setters:[function(e){t=e.applyDecoratedDescriptor,n=e.initializerDefineProperty},function(e){o=e.cclegacy,r=e.Label,l=e._decorator,i=e.Component}],execute:function(){var a,s,c,u,p;o._RF.push({},"bee3fBNNvJPPq9BU/XUHvI3","GameContent",void 0);const{ccclass:b,property:d}=l;e("GameContent",(a=b("GameContent"),s=d(r),a((p=t((u=class extends i{constructor(...e){super(...e),n(this,"label",p,this)}onLoad(){console.log("onLoad is called version 1.0.3"),this.label&&(this.label.string="Inital one ")}}).prototype,"label",[s],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),c=u))||c));o._RF.pop()}}}));

System.register("chunks:///_virtual/HotUpdateSearchPath.ts",["cc"],(function(t){var e,s,o,a,r;return{setters:[function(t){e=t.cclegacy,s=t.Component,o=t.native,a=t.sys,r=t._decorator}],execute:function(){var i;e._RF.push({},"7672aq/5fdKI5zvMMmII8pW","HotUpdateSearchPath",void 0);const{ccclass:l,property:c}=r;t("HotUpdateSearchPath",l("HotUpdateSearchPath")(i=class extends s{onLoad(){this.setupHotUpdateSearchPaths()}setupHotUpdateSearchPaths(){try{console.log("Setting up hot update search paths...");const t=(o.fileUtils&&o.fileUtils.getWritablePath?o.fileUtils.getWritablePath():"/")+"hotUpdatePath/",e=a.localStorage.getItem("HotUpdateSearchPaths");let s=o.fileUtils.getSearchPaths();if(e)try{const t=JSON.parse(e);console.log("Found stored search paths:",t);const a=t.filter((t=>{const e=o.fileUtils.isDirectoryExist(t);return console.log(`Path ${t} exists: ${e}`),e}));if(a.length>0)return s=[...a,...s.filter((t=>!a.includes(t)))],o.fileUtils.setSearchPaths(s),void console.log("Applied stored search paths:",s)}catch(t){console.error("Failed to parse stored search paths:",t)}if(o.fileUtils.isDirectoryExist(t)){console.log("Hot update directory exists:",t);if(this.checkForUpdatedFiles(t)){console.log("Found updated files in hot update directory");const e=s.indexOf(t);e>-1&&s.splice(e,1),s.unshift(t),o.fileUtils.setSearchPaths(s),console.log("Hot update search paths applied:",s),a.localStorage.setItem("HotUpdateSearchPaths",JSON.stringify(s))}else console.log("No updated files found in hot update directory")}else console.log("Hot update directory does not exist:",t)}catch(t){console.error("Failed to setup hot update search paths:",t)}}checkForUpdatedFiles(t){try{const e=["assets/","src/","main.js","application.js"];for(const s of e){const e=t+s;if(o.fileUtils.isFileExist(e)||o.fileUtils.isDirectoryExist(e))return console.log("Found updated content at:",e),!0}if(o.fileUtils.listFiles){const e=o.fileUtils.listFiles(t);if(e&&e.length>0)return console.log("Hot update directory contains files:",e.length),!0}return!1}catch(t){return console.error("Error checking for updated files:",t),!1}}refreshSearchPaths(){this.setupHotUpdateSearchPaths()}clearHotUpdatePaths(){try{const t=o.fileUtils.getSearchPaths(),e=(o.fileUtils&&o.fileUtils.getWritablePath&&o.fileUtils.getWritablePath(),t.filter((t=>!t.includes("hotUpdatePath"))));o.fileUtils.setSearchPaths(e),a.localStorage.removeItem("HotUpdateSearchPaths"),console.log("Hot update search paths cleared. Current paths:",e)}catch(t){console.error("Failed to clear hot update search paths:",t)}}})||i);e._RF.pop()}}}));

System.register("chunks:///_virtual/main",["./GameContent.ts","./HotUpdateSearchPath.ts","./RemoteEntryLoader.ts"],(function(){return{setters:[null,null,null],execute:function(){}}}));

System.register("chunks:///_virtual/RemoteEntryLoader.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(e){var t,s,a,i,o,n,r,l,h,c,d,g,p,u;return{setters:[function(e){t=e.applyDecoratedDescriptor,s=e.initializerDefineProperty},function(e){a=e.cclegacy,i=e.Asset,o=e.Label,n=e.ProgressBar,r=e.Button,l=e._decorator,h=e.Component,c=e.native,d=e.sys,g=e.assetManager,p=e.director,u=e.game}],execute:function(){var f,U,y,m,b,M,A,P,F,R,E,v,S;a._RF.push({},"bd9f3f3xF9NvYxZN8P+pIm1","RemoteEntryLoader",void 0);const{ccclass:k,property:L}=l;e("RemoteEntryLoader",(f=k("RemoteEntryLoader"),U=L(i),y=L(o),m=L(n),b=L(r),M=L(r),f((F=t((P=class extends h{constructor(...e){super(...e),s(this,"manifestUrl",F,this),s(this,"statusLabel",R,this),s(this,"progressBar",E,this),s(this,"checkUpdateBtn",v,this),s(this,"retryBtn",S,this),this.assetsManager=null,this.storagePath="",this.updating=!1,this.canRetry=!1,this.updateListener=null}onLoad(){this.storagePath=c.fileUtils&&c.fileUtils.getWritablePath?c.fileUtils.getWritablePath()+"hotUpdatePath/":"/hotUpdatePath/",this.initHotUpdate(),this.setupUI(),this.checkForPendingUpdate()}checkForPendingUpdate(){const e=d.localStorage.getItem("hotUpdateReady"),t=d.localStorage.getItem("hotUpdatePath");"true"===e&&t&&(console.log("Applying pending hot update..."),this.applyHotUpdate(t),d.localStorage.removeItem("hotUpdateReady"),d.localStorage.removeItem("hotUpdatePath"))}applyHotUpdate(e){try{console.log("Applying hot update from:",e),this.clearAssetCache(),this.updateSearchPaths(e),this.reloadUpdatedAssets(),this.statusLabel.string="Hot update applied successfully!"}catch(e){console.error("Failed to apply hot update:",e),this.statusLabel.string="Failed to apply hot update"}}clearAssetCache(){g&&g.assets&&(console.log("Clearing asset cache..."),g.assets.clear()),g.bundles&&g.bundles.forEach(((e,t)=>{console.log("Releasing bundle:",t),e.releaseAll()}))}updateSearchPaths(e){const t=c.fileUtils.getSearchPaths();console.log("Original search paths:",t);const s=t.indexOf(e);s>-1&&t.splice(s,1),t.unshift(e),c.fileUtils.setSearchPaths(t),console.log("Updated search paths:",t),d.localStorage.setItem("HotUpdateSearchPaths",JSON.stringify(t))}reloadUpdatedAssets(){console.log("Reloading updated assets..."),this.reloadMainBundle(),this.scheduleOnce((()=>{this.reloadCurrentScene()}),1)}reloadMainBundle(){const e=g.getBundle("main");e&&(console.log("Releasing main bundle..."),e.releaseAll()),g.loadBundle("main",((e,t)=>{e?console.error("Failed to reload main bundle:",e):console.log("Main bundle reloaded successfully")}))}reloadCurrentScene(){const e=p.getScene();e&&(console.log("Reloading current scene:",e.name),p.loadScene(e.name,(e=>{e?console.error("Failed to reload scene:",e):console.log("Scene reloaded successfully with updated assets")})))}initHotUpdate(){try{var e;c.fileUtils.isDirectoryExist(this.storagePath)||c.fileUtils.createDirectory(this.storagePath),console.log("Storage path:",this.storagePath),console.log("Manifest URL:",null==(e=this.manifestUrl)?void 0:e.nativeUrl),this.assetsManager=new c.AssetsManager(this.manifestUrl.nativeUrl,this.storagePath),this.assetsManager.setMaxConcurrentTask(3),this.assetsManager.setVersionCompareHandle(((e,t)=>this.compareVersion(e,t))),this.assetsManager.setVerifyCallback(((e,t)=>this.verifyAsset(e,t))),this.updateListener=e=>this.updateCallback(e),this.assetsManager.setEventCallback(this.updateListener),this.loadLocalManifest(),this.statusLabel.string="Hot update initialized"}catch(e){console.error("Failed to initialize hot update:",e),this.statusLabel.string="Failed to initialize hot update"}}loadLocalManifest(){var e;if(this.assetsManager&&null!=(e=this.manifestUrl)&&e.nativeUrl)try{this.assetsManager.loadLocalManifest(this.manifestUrl.nativeUrl),this.scheduleOnce((()=>{this.setupInitialSearchPaths()}),.1)}catch(e){console.error("Failed to load local manifest:",e)}}setupInitialSearchPaths(){if(!this.assetsManager)return;const e=d.localStorage.getItem("HotUpdateSearchPaths");if(e)try{const t=JSON.parse(e);return c.fileUtils.setSearchPaths(t),void console.log("Restored search paths from storage:",t)}catch(e){console.error("Failed to parse stored search paths:",e)}const t=c.fileUtils.getSearchPaths();-1===t.indexOf(this.storagePath)&&(t.unshift(this.storagePath),c.fileUtils.setSearchPaths(t),console.log("Initial search paths setup:",t))}setupUI(){this.checkUpdateBtn&&this.checkUpdateBtn.node.on("click",this.checkForUpdate,this),this.retryBtn&&(this.retryBtn.node.on("click",this.retry,this),this.retryBtn.node.active=!1)}checkForUpdate(){this.assetsManager&&!this.updating&&(console.log("Checking for updates..."),this.updating=!0,this.canRetry=!1,this.checkUpdateBtn.node.active=!1,this.retryBtn.node.active=!1,this.statusLabel.string="Checking for updates...",this.progressBar.progress=0,this.assetsManager.checkUpdate())}retry(){this.canRetry&&(this.canRetry=!1,this.retryBtn.node.active=!1,this.statusLabel.string="Retrying failed downloads...",this.assetsManager.downloadFailedAssets())}updateCallback(e){const t=e.getEventCode();switch(console.log("Update event code:",t),t){case c.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:this.statusLabel.string="No local manifest file found",console.log("No local manifest file found"),this.onUpdateFinished(!1);break;case c.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:this.statusLabel.string="Failed to download manifest",console.log("Failed to download manifest"),this.onUpdateFinished(!1);break;case c.EventAssetsManager.ERROR_PARSE_MANIFEST:this.statusLabel.string="Failed to parse manifest",console.log("Failed to parse manifest"),this.onUpdateFinished(!1);break;case c.EventAssetsManager.NEW_VERSION_FOUND:this.statusLabel.string="New version found, starting download...",console.log("New version found, starting download..."),this.assetsManager.update();break;case c.EventAssetsManager.ALREADY_UP_TO_DATE:this.statusLabel.string="Already up to date",console.log("Already up to date"),this.onUpdateFinished(!0);break;case c.EventAssetsManager.UPDATE_PROGRESSION:console.log("Update progression"),this.handleUpdateProgress(e);break;case c.EventAssetsManager.ASSET_UPDATED:console.log("Asset updated:",e.getAssetId());break;case c.EventAssetsManager.ERROR_UPDATING:const t=e.getAssetId(),s=e.getMessage();this.statusLabel.string=`Failed to update asset: ${t}`,console.log(`Failed asset: ${t}, Message: ${s}`),this.onUpdateFinished(!1);break;case c.EventAssetsManager.UPDATE_FINISHED:this.statusLabel.string="Update completed! Applying changes...",console.log("Update completed! Applying changes..."),this.handleUpdateFinished();break;case c.EventAssetsManager.UPDATE_FAILED:this.statusLabel.string="Update failed: "+e.getMessage(),console.log("Update failed:",e.getMessage()),this.canRetry=!0,this.retryBtn.node.active=!0,this.onUpdateFinished(!1);break;case c.EventAssetsManager.ERROR_DECOMPRESS:this.statusLabel.string="Decompression failed",console.log("Decompression failed"),this.onUpdateFinished(!1)}}handleUpdateFinished(){console.log("Update finished, applying hot update..."),this.applyHotUpdate(this.storagePath),d.localStorage.setItem("hotUpdateReady","true"),d.localStorage.setItem("hotUpdatePath",this.storagePath),this.onUpdateFinished(!0,!1)}handleUpdateProgress(e){const t=e.getPercent(),s=e.getDownloadedBytes(),a=e.getTotalBytes(),i=e.getDownloadedFiles(),o=e.getTotalFiles();this.progressBar.progress=t/100,this.statusLabel.string=`Downloading... ${Math.floor(t)}%\nFiles: ${i}/${o}\nSize: ${this.formatBytes(s)}/${this.formatBytes(a)}`,console.log(`Progress: ${Math.floor(t)}% - Files: ${i}/${o}`)}onUpdateFinished(e,t=!1){this.updating=!1,this.checkUpdateBtn.node.active=!0,t&&this.showRestartOption()}showRestartOption(){this.statusLabel.string="Update completed! Tap to restart.",this.checkUpdateBtn.getComponentInChildren(o).string="Restart Game",this.checkUpdateBtn.node.off("click",this.checkForUpdate,this),this.checkUpdateBtn.node.on("click",this.restartGame,this)}restartGame(){console.log("Restarting game..."),this.assetsManager&&this.assetsManager.setEventCallback(null),this.clearAssetCache(),u.restart()}compareVersion(e,t){const s=e=>e.split(".").map((e=>parseInt(e)||0)),a=s(e),i=s(t);for(let e=0;e<Math.max(a.length,i.length);e++){const t=a[e]||0,s=i[e]||0;if(t!==s)return t-s}return 0}verifyAsset(e,t){return!0}formatBytes(e){if(0===e)return"0 B";const t=Math.floor(Math.log(e)/Math.log(1024));return parseFloat((e/Math.pow(1024,t)).toFixed(2))+" "+["B","KB","MB","GB"][t]}onDestroy(){this.assetsManager&&this.updateListener&&this.assetsManager.setEventCallback(null)}}).prototype,"manifestUrl",[U],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),R=t(P.prototype,"statusLabel",[y],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),E=t(P.prototype,"progressBar",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),v=t(P.prototype,"checkUpdateBtn",[b],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),S=t(P.prototype,"retryBtn",[M],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),A=P))||A));a._RF.pop()}}}));

(function(r) {
  r('virtual:///prerequisite-imports/main', 'chunks:///_virtual/main'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});