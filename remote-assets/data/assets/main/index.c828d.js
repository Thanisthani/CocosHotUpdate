System.register("chunks:///_virtual/GameContent.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(e){var t,o,l,n,i,s,r;return{setters:[function(e){t=e.applyDecoratedDescriptor,o=e.initializerDefineProperty},function(e){l=e.cclegacy,n=e.Label,i=e._decorator,s=e.Component,r=e.native}],execute:function(){var a,c,u,p,f;l._RF.push({},"bee3fBNNvJPPq9BU/XUHvI3","GameContent",void 0);const{ccclass:d,property:h}=i;e("GameContent",(a=d("GameContent"),c=h(n),a((f=t((p=class extends s{constructor(...e){super(...e),o(this,"label",f,this)}onLoad(){{const e=r.fileUtils.getSearchPaths();console.log("Current search paths:",e);const t=r.fileUtils.getWritablePath()+"hot-update-storage/";if(r.fileUtils.isDirectoryExist(t)){const e=r.fileUtils.listFiles(t);console.log("Hot update files:",e)}}console.log("onLoad is called version 1.0.3"),this.label&&(this.label.string="Inital one updated")}}).prototype,"label",[c],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),u=p))||u));l._RF.pop()}}}));

System.register("chunks:///_virtual/main",["./GameContent.ts","./RemoteEntryLoader.ts"],(function(){return{setters:[null,null],execute:function(){}}}));

System.register("chunks:///_virtual/RemoteEntryLoader.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var e,s,a,i,r,n,o,l,h,c,d,p,g,u;return{setters:[function(t){e=t.applyDecoratedDescriptor,s=t.initializerDefineProperty},function(t){a=t.cclegacy,i=t.Asset,r=t.Label,n=t.ProgressBar,o=t.Button,l=t._decorator,h=t.Component,c=t.native,d=t.sys,p=t.assetManager,g=t.director,u=t.game}],execute:function(){var f,U,y,b,M,m,E,L,v,F,P,R,k;a._RF.push({},"bd9f3f3xF9NvYxZN8P+pIm1","RemoteEntryLoader",void 0);const{ccclass:A,property:B}=l;t("RemoteEntryLoader",(f=A("RemoteEntryLoader"),U=B(i),y=B(r),b=B(n),M=B(o),m=B(o),f((v=e((L=class extends h{constructor(...t){super(...t),s(this,"manifestUrl",v,this),s(this,"statusLabel",F,this),s(this,"progressBar",P,this),s(this,"checkUpdateBtn",R,this),s(this,"retryBtn",k,this),this.assetsManager=null,this.storagePath="",this.updating=!1,this.canRetry=!1,this.updateListener=null}onLoad(){this.storagePath=(c.fileUtils&&c.fileUtils.getWritablePath?c.fileUtils.getWritablePath():"/")+"hot-update-storage/",this.initHotUpdate(),this.setupUI(),this.checkForPendingUpdate()}checkForPendingUpdate(){const t=d.localStorage.getItem("hotUpdateReady"),e=d.localStorage.getItem("hotUpdatePath");"true"===t&&e&&(console.log("Applying pending hot update..."),this.applyHotUpdate(e),d.localStorage.removeItem("hotUpdateReady"),d.localStorage.removeItem("hotUpdatePath"))}applyHotUpdate(t){try{const e=c.fileUtils.getSearchPaths();console.log("Current search paths:",e);const s=e.indexOf(t);s>-1&&e.splice(s,1),e.unshift(t),c.fileUtils.setSearchPaths(e),console.log("Updated search paths:",e),this.statusLabel.string="Hot update applied successfully!",this.reloadMainAssets()}catch(t){console.error("Failed to apply hot update:",t),this.statusLabel.string="Failed to apply hot update"}}reloadMainAssets(){p&&p.assets&&p.assets.clear(),this.scheduleOnce((()=>{g.getScene()&&g.loadScene(g.getScene().name,(t=>{t?console.error("Failed to reload scene:",t):console.log("Scene reloaded successfully")}))}),.1)}initHotUpdate(){try{var t;c.fileUtils.isDirectoryExist(this.storagePath)||c.fileUtils.createDirectory(this.storagePath),console.log("Storage path:",this.storagePath),console.log("Manifest URL:",null==(t=this.manifestUrl)?void 0:t.nativeUrl),this.assetsManager=new c.AssetsManager(this.manifestUrl.nativeUrl,this.storagePath),this.assetsManager.setMaxConcurrentTask(3),this.assetsManager.setVersionCompareHandle(((t,e)=>this.compareVersion(t,e))),this.assetsManager.setVerifyCallback(((t,e)=>this.verifyAsset(t,e))),this.updateListener=t=>this.updateCallback(t),this.assetsManager.setEventCallback(this.updateListener),this.loadLocalManifest(),this.statusLabel.string="Hot update initialized"}catch(t){console.error("Failed to initialize hot update:",t),this.statusLabel.string="Failed to initialize hot update"}}loadLocalManifest(){var t;if(this.assetsManager&&null!=(t=this.manifestUrl)&&t.nativeUrl)try{this.assetsManager.loadLocalManifest(this.manifestUrl.nativeUrl),this.scheduleOnce((()=>{this.setupSearchPaths()}),.1)}catch(t){console.error("Failed to load local manifest:",t)}}setupSearchPaths(){if(this.assetsManager)try{const t=this.assetsManager.getLocalManifest();if(!t||!t.isLoaded())return void console.log("Local manifest not loaded yet");console.log("Setting up search paths...");const e=c.fileUtils.getSearchPaths();console.log("Original search paths:",e);const s=this.storagePath,a=e.indexOf(s);a>-1&&e.splice(a,1),e.unshift(s),c.fileUtils.setSearchPaths(e),console.log("Updated search paths:",e)}catch(t){console.error("Failed to setup search paths:",t)}}setupUI(){this.checkUpdateBtn&&this.checkUpdateBtn.node.on("click",this.checkForUpdate,this),this.retryBtn&&(this.retryBtn.node.on("click",this.retry,this),this.retryBtn.node.active=!1)}checkForUpdate(){this.assetsManager&&!this.updating&&(console.log("Checking for updates..."),this.updating=!0,this.canRetry=!1,this.checkUpdateBtn.node.active=!1,this.retryBtn.node.active=!1,this.statusLabel.string="Checking for updates...",this.progressBar.progress=0,this.assetsManager.checkUpdate())}retry(){this.canRetry&&(this.canRetry=!1,this.retryBtn.node.active=!1,this.statusLabel.string="Retrying failed downloads...",this.assetsManager.downloadFailedAssets())}updateCallback(t){const e=t.getEventCode();switch(console.log("Update event code:",e),e){case c.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:this.statusLabel.string="No local manifest file found",this.onUpdateFinished(!1);break;case c.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:this.statusLabel.string="Failed to download manifest",this.onUpdateFinished(!1);break;case c.EventAssetsManager.ERROR_PARSE_MANIFEST:this.statusLabel.string="Failed to parse manifest",this.onUpdateFinished(!1);break;case c.EventAssetsManager.NEW_VERSION_FOUND:this.statusLabel.string="New version found, starting download...",this.assetsManager.update();break;case c.EventAssetsManager.ALREADY_UP_TO_DATE:this.statusLabel.string="Already up to date",this.onUpdateFinished(!0);break;case c.EventAssetsManager.UPDATE_PROGRESSION:this.handleUpdateProgress(t);break;case c.EventAssetsManager.ASSET_UPDATED:console.log("Asset updated:",t.getAssetId());break;case c.EventAssetsManager.ERROR_UPDATING:this.statusLabel.string="Update error: "+t.getMessage(),this.onUpdateFinished(!1);break;case c.EventAssetsManager.UPDATE_FINISHED:this.statusLabel.string="Update completed! Preparing restart...",this.handleUpdateFinished();break;case c.EventAssetsManager.UPDATE_FAILED:this.statusLabel.string="Update failed: "+t.getMessage(),this.canRetry=!0,this.retryBtn.node.active=!0,this.onUpdateFinished(!1);break;case c.EventAssetsManager.ERROR_DECOMPRESS:this.statusLabel.string="Decompression failed",this.onUpdateFinished(!1)}}handleUpdateFinished(){console.log("Update finished, setting up for restart...");const t=c.fileUtils.getSearchPaths(),e=this.storagePath,s=t.indexOf(e);s>-1&&t.splice(s,1),t.unshift(e),c.fileUtils.setSearchPaths(t),console.log("Updated search paths:",t),d.localStorage.setItem("hotUpdateReady","true"),d.localStorage.setItem("hotUpdatePath",e),p&&p.assets&&p.assets.clear(),this.onUpdateFinished(!0,!0)}handleUpdateProgress(t){const e=t.getPercent(),s=t.getDownloadedBytes(),a=t.getTotalBytes(),i=t.getDownloadedFiles(),r=t.getTotalFiles();this.progressBar.progress=e/100,this.statusLabel.string=`Downloading... ${Math.floor(e)}%\nFiles: ${i}/${r}\nSize: ${this.formatBytes(s)}/${this.formatBytes(a)}`,console.log(`Progress: ${Math.floor(e)}% - Files: ${i}/${r}`)}onUpdateFinished(t,e=!1){this.updating=!1,this.checkUpdateBtn.node.active=!0,e&&this.showRestartOption()}showRestartOption(){this.statusLabel.string="Update completed! Tap to restart.",this.checkUpdateBtn.getComponentInChildren(r).string="Restart Game",this.checkUpdateBtn.node.off("click",this.checkForUpdate,this),this.checkUpdateBtn.node.on("click",this.restartGame,this)}restartGame(){console.log("Restarting game..."),this.assetsManager&&this.assetsManager.setEventCallback(null),p&&p.assets&&p.assets.clear(),u.restart()}compareVersion(t,e){const s=t=>t.split(".").map((t=>parseInt(t)||0)),a=s(t),i=s(e);for(let t=0;t<Math.max(a.length,i.length);t++){const e=a[t]||0,s=i[t]||0;if(e!==s)return e-s}return 0}verifyAsset(t,e){return!0}formatBytes(t){if(0===t)return"0 B";const e=Math.floor(Math.log(t)/Math.log(1024));return parseFloat((t/Math.pow(1024,e)).toFixed(2))+" "+["B","KB","MB","GB"][e]}onDestroy(){this.assetsManager&&this.updateListener&&this.assetsManager.setEventCallback(null)}}).prototype,"manifestUrl",[U],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),F=e(L.prototype,"statusLabel",[y],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),P=e(L.prototype,"progressBar",[b],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),R=e(L.prototype,"checkUpdateBtn",[M],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),k=e(L.prototype,"retryBtn",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),E=L))||E));a._RF.pop()}}}));

(function(r) {
  r('virtual:///prerequisite-imports/main', 'chunks:///_virtual/main'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});